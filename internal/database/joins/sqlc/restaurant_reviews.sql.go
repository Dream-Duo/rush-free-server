// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: restaurant_reviews.sql

package joins

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRestaurantReviews = `-- name: GetRestaurantReviews :many
SELECT r.review_id, 
       r.rating, 
       r.review_text, 
       u.first_name || ' ' || u.last_name AS user_name, 
       r.created_at
FROM restaurant_reviews r
JOIN users u ON r.user_id = u.user_id
WHERE r.restaurant_id = $1
ORDER BY r.created_at DESC
`

type GetRestaurantReviewsRow struct {
	ReviewID   int32
	Rating     pgtype.Int4
	ReviewText pgtype.Text
	UserName   interface{}
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) GetRestaurantReviews(ctx context.Context, restaurantID int32) ([]GetRestaurantReviewsRow, error) {
	rows, err := q.db.Query(ctx, getRestaurantReviews, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRestaurantReviewsRow
	for rows.Next() {
		var i GetRestaurantReviewsRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.Rating,
			&i.ReviewText,
			&i.UserName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
