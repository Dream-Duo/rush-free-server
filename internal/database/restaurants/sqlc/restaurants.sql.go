// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: restaurants.sql

package restaurants

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRestaurant = `-- name: CreateRestaurant :one
INSERT INTO restaurants (
    vendor_id, name, description, cuisine_type, address, location, phone, email, seating_capacity, status
) VALUES (
    $1, $2, $3, $4, $5, ST_GeographyFromText('SRID=4326;POINT(' || $6 || ' ' || $7 || ')'), $8, $9, $10, $11
) RETURNING restaurant_id, vendor_id, name, description, cuisine_type, address, location, phone, email, seating_capacity, status, created_at, updated_at
`

type CreateRestaurantParams struct {
	VendorID        pgtype.Int4
	Name            string
	Description     pgtype.Text
	CuisineType     pgtype.Text
	Address         string
	Column6         pgtype.Text
	Column7         pgtype.Text
	Phone           pgtype.Text
	Email           pgtype.Text
	SeatingCapacity pgtype.Int4
	Status          interface{}
}

func (q *Queries) CreateRestaurant(ctx context.Context, arg CreateRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRow(ctx, createRestaurant,
		arg.VendorID,
		arg.Name,
		arg.Description,
		arg.CuisineType,
		arg.Address,
		arg.Column6,
		arg.Column7,
		arg.Phone,
		arg.Email,
		arg.SeatingCapacity,
		arg.Status,
	)
	var i Restaurant
	err := row.Scan(
		&i.RestaurantID,
		&i.VendorID,
		&i.Name,
		&i.Description,
		&i.CuisineType,
		&i.Address,
		&i.Location,
		&i.Phone,
		&i.Email,
		&i.SeatingCapacity,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRestaurant = `-- name: DeleteRestaurant :exec
DELETE FROM restaurants WHERE restaurant_id = $1
`

func (q *Queries) DeleteRestaurant(ctx context.Context, restaurantID int32) error {
	_, err := q.db.Exec(ctx, deleteRestaurant, restaurantID)
	return err
}

const getAllRestaurants = `-- name: GetAllRestaurants :many
SELECT restaurant_id, vendor_id, name, description, cuisine_type, address, location, phone, email, seating_capacity, status, created_at, updated_at FROM restaurants ORDER BY created_at DESC
`

func (q *Queries) GetAllRestaurants(ctx context.Context) ([]Restaurant, error) {
	rows, err := q.db.Query(ctx, getAllRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.RestaurantID,
			&i.VendorID,
			&i.Name,
			&i.Description,
			&i.CuisineType,
			&i.Address,
			&i.Location,
			&i.Phone,
			&i.Email,
			&i.SeatingCapacity,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRestaurantByID = `-- name: GetRestaurantByID :one
SELECT restaurant_id, vendor_id, name, description, cuisine_type, address, location, phone, email, seating_capacity, status, created_at, updated_at FROM restaurants WHERE restaurant_id = $1
`

func (q *Queries) GetRestaurantByID(ctx context.Context, restaurantID int32) (Restaurant, error) {
	row := q.db.QueryRow(ctx, getRestaurantByID, restaurantID)
	var i Restaurant
	err := row.Scan(
		&i.RestaurantID,
		&i.VendorID,
		&i.Name,
		&i.Description,
		&i.CuisineType,
		&i.Address,
		&i.Location,
		&i.Phone,
		&i.Email,
		&i.SeatingCapacity,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRestaurantsNearLocation = `-- name: GetRestaurantsNearLocation :many
SELECT restaurant_id, vendor_id, name, description, cuisine_type, address, location, phone, email, seating_capacity, status, created_at, updated_at FROM restaurants
WHERE ST_DWithin(location, ST_GeographyFromText('SRID=4326;POINT(' || $1 || ' ' || $2 || ')'), $3)
`

type GetRestaurantsNearLocationParams struct {
	Column1   pgtype.Text
	Column2   pgtype.Text
	StDwithin interface{}
}

func (q *Queries) GetRestaurantsNearLocation(ctx context.Context, arg GetRestaurantsNearLocationParams) ([]Restaurant, error) {
	rows, err := q.db.Query(ctx, getRestaurantsNearLocation, arg.Column1, arg.Column2, arg.StDwithin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.RestaurantID,
			&i.VendorID,
			&i.Name,
			&i.Description,
			&i.CuisineType,
			&i.Address,
			&i.Location,
			&i.Phone,
			&i.Email,
			&i.SeatingCapacity,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRestaurantStatus = `-- name: UpdateRestaurantStatus :exec
UPDATE restaurants
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE restaurant_id = $1
`

type UpdateRestaurantStatusParams struct {
	RestaurantID int32
	Status       interface{}
}

func (q *Queries) UpdateRestaurantStatus(ctx context.Context, arg UpdateRestaurantStatusParams) error {
	_, err := q.db.Exec(ctx, updateRestaurantStatus, arg.RestaurantID, arg.Status)
	return err
}
