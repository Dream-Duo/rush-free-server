// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: restaurant_amenities.sql

package restaurants

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addRestaurantAmenity = `-- name: AddRestaurantAmenity :one
INSERT INTO restaurant_amenities (
    restaurant_id, amenity_name, is_available
) VALUES (
    $1, $2, $3
) RETURNING amenity_id, restaurant_id, amenity_name, is_available
`

type AddRestaurantAmenityParams struct {
	RestaurantID int32
	AmenityName  pgtype.Text
	IsAvailable  pgtype.Bool
}

func (q *Queries) AddRestaurantAmenity(ctx context.Context, arg AddRestaurantAmenityParams) (RestaurantAmenity, error) {
	row := q.db.QueryRow(ctx, addRestaurantAmenity, arg.RestaurantID, arg.AmenityName, arg.IsAvailable)
	var i RestaurantAmenity
	err := row.Scan(
		&i.AmenityID,
		&i.RestaurantID,
		&i.AmenityName,
		&i.IsAvailable,
	)
	return i, err
}

const deleteRestaurantAmenity = `-- name: DeleteRestaurantAmenity :exec
DELETE FROM restaurant_amenities WHERE restaurant_id = $1 AND amenity_name = $2
`

type DeleteRestaurantAmenityParams struct {
	RestaurantID int32
	AmenityName  pgtype.Text
}

func (q *Queries) DeleteRestaurantAmenity(ctx context.Context, arg DeleteRestaurantAmenityParams) error {
	_, err := q.db.Exec(ctx, deleteRestaurantAmenity, arg.RestaurantID, arg.AmenityName)
	return err
}

const getRestaurantAmenities = `-- name: GetRestaurantAmenities :many
SELECT amenity_id, restaurant_id, amenity_name, is_available FROM restaurant_amenities WHERE restaurant_id = $1
`

func (q *Queries) GetRestaurantAmenities(ctx context.Context, restaurantID int32) ([]RestaurantAmenity, error) {
	rows, err := q.db.Query(ctx, getRestaurantAmenities, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RestaurantAmenity
	for rows.Next() {
		var i RestaurantAmenity
		if err := rows.Scan(
			&i.AmenityID,
			&i.RestaurantID,
			&i.AmenityName,
			&i.IsAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRestaurantAmenity = `-- name: UpdateRestaurantAmenity :exec
UPDATE restaurant_amenities
SET is_available = $3
WHERE restaurant_id = $1 AND amenity_name = $2
`

type UpdateRestaurantAmenityParams struct {
	RestaurantID int32
	AmenityName  pgtype.Text
	IsAvailable  pgtype.Bool
}

func (q *Queries) UpdateRestaurantAmenity(ctx context.Context, arg UpdateRestaurantAmenityParams) error {
	_, err := q.db.Exec(ctx, updateRestaurantAmenity, arg.RestaurantID, arg.AmenityName, arg.IsAvailable)
	return err
}
