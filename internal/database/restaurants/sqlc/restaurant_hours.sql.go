// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: restaurant_hours.sql

package restaurants

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRestaurantHour = `-- name: CreateRestaurantHour :one
INSERT INTO restaurant_hours (
    restaurant_id, day_of_week, opening_time, closing_time, is_closed
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING hours_id, restaurant_id, day_of_week, opening_time, closing_time, is_closed, special_hours_note
`

type CreateRestaurantHourParams struct {
	RestaurantID int32
	DayOfWeek    int32
	OpeningTime  pgtype.Time
	ClosingTime  pgtype.Time
	IsClosed     pgtype.Bool
}

func (q *Queries) CreateRestaurantHour(ctx context.Context, arg CreateRestaurantHourParams) (RestaurantHour, error) {
	row := q.db.QueryRow(ctx, createRestaurantHour,
		arg.RestaurantID,
		arg.DayOfWeek,
		arg.OpeningTime,
		arg.ClosingTime,
		arg.IsClosed,
	)
	var i RestaurantHour
	err := row.Scan(
		&i.HoursID,
		&i.RestaurantID,
		&i.DayOfWeek,
		&i.OpeningTime,
		&i.ClosingTime,
		&i.IsClosed,
		&i.SpecialHoursNote,
	)
	return i, err
}

const deleteRestaurantHour = `-- name: DeleteRestaurantHour :exec
DELETE FROM restaurant_hours WHERE restaurant_id = $1 AND day_of_week = $2
`

type DeleteRestaurantHourParams struct {
	RestaurantID int32
	DayOfWeek    int32
}

func (q *Queries) DeleteRestaurantHour(ctx context.Context, arg DeleteRestaurantHourParams) error {
	_, err := q.db.Exec(ctx, deleteRestaurantHour, arg.RestaurantID, arg.DayOfWeek)
	return err
}

const getRestaurantHours = `-- name: GetRestaurantHours :many
SELECT hours_id, restaurant_id, day_of_week, opening_time, closing_time, is_closed, special_hours_note FROM restaurant_hours WHERE restaurant_id = $1 ORDER BY day_of_week
`

func (q *Queries) GetRestaurantHours(ctx context.Context, restaurantID int32) ([]RestaurantHour, error) {
	rows, err := q.db.Query(ctx, getRestaurantHours, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RestaurantHour
	for rows.Next() {
		var i RestaurantHour
		if err := rows.Scan(
			&i.HoursID,
			&i.RestaurantID,
			&i.DayOfWeek,
			&i.OpeningTime,
			&i.ClosingTime,
			&i.IsClosed,
			&i.SpecialHoursNote,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRestaurantHour = `-- name: UpdateRestaurantHour :exec
UPDATE restaurant_hours
SET opening_time = $3, closing_time = $4, is_closed = $5
WHERE restaurant_id = $1 AND day_of_week = $2
`

type UpdateRestaurantHourParams struct {
	RestaurantID int32
	DayOfWeek    int32
	OpeningTime  pgtype.Time
	ClosingTime  pgtype.Time
	IsClosed     pgtype.Bool
}

func (q *Queries) UpdateRestaurantHour(ctx context.Context, arg UpdateRestaurantHourParams) error {
	_, err := q.db.Exec(ctx, updateRestaurantHour,
		arg.RestaurantID,
		arg.DayOfWeek,
		arg.OpeningTime,
		arg.ClosingTime,
		arg.IsClosed,
	)
	return err
}
